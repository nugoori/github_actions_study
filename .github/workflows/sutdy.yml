name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          chmod 777 ./mvnw
          ./mvnw clean package -Dtestskip

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/server .
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/server:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.NGINX_IP }}/env")
          echo $STATUS
          if [ $STATUS = 404 ]; then
            CURRENT_UPSTREAM=blue
          else
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.NGINX_IP }}/env")
          fi
          echo $CURRENT_UPSTREAM
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_IP=${{ secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "STOPPED_IP=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_IP=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
            echo "STOPPED_IP=${{ secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi
          
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ env.STOPPED_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/server:latest
            sudo docker-compose up -d
      
      - name: Check deploy server URL PORT 8080
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:8080/env
          max-attempts: 3
          retry-delay: 10s
      - name: Check deploy server URL PORT 8081
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:8081/env
          max-attempts: 3
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.NGINX_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$server_env ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/server-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ env.CURRENT_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop prod1
            sudo docker stop prod2
            sudo docker rm prod1
            sudo docker rm prod2
          
