name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # name은 마음대로, 나머지는 정해진 형식대로
      - name: Install JDK 11
        uses: actions/setup-java@3
        with:
          java-version: '11'
          distributes: 'temurin'

      - name: Build with Maven
        run: ./mvnw clean package -Dtestskip

      - name: Login to Docker
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{secrets.DOCKERHUB_USERNAME}}/server .

      - name: Push Docker
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/server:lastest
  # bulid 끝
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          CURRENT_UPSTREAM=$(curl -s "http://${{secrets.NGINX_IP}}/env")
          echo $CURRENT_UPSTREAM
          if [ $CURRENT_UPSTREAM -ne blue -o $CURRENT_UPSTREAM -ne green ]; then
            #CURRENT_UPSREAM=blue
          fi
          if [ $CURRENT_UPSTREAM -eq blue ]; then
            #  변수 $GITHUB_ENV에 앞의 값 저장
            echo "CURRENT_IP=${{ secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "STOPPED_IP=${{secrets.GREEN_IP }}" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green"  >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM -eq green ]; then
            echo "CURRENT_IP=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
            # $GITHUB_ENV 변수에 앞의 값 저장
            echo "STOPPED_IP=${{secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue"  >> $GITHUB_ENV
          else
            eco "error"
            exit 1
          fi
      - name : Docker compose
        uses: appleboy/ssh-action@master
        with:
          # appleboy/ssh-action@master 사용에 필요한 3가지
          username: ubuntu
          host: ${{ env.STOPPED_IP }}
          key: ${{secrets.EC2_SSH_KEY}}
          
          script_stop: true
          script: |
            docker pull ${{secrets.DOCKERHUB_USERNAME}}/server:latest
            docker-compose up -d
      - name: Check deploy server URL PORT 8080
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:8080/env
          max-attempts: 3
          retry-delay: 10s
      - name: Check deploy server URL PORT 8081
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:8081/env
          max-attempts: 3
          retry-delay: 10s

  # blue green 둘다 돌아가는 중, nginx가 env바꿔주기
      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ env.NGINX_IP }}
          key: ${{secrets.EC2_SSH_KEY}}
          script_stop: true
          script: |
            docker exec -i nginxserver bash -c 'echo "set \$server_env ${{env.TARGET_UPSTREAM}}"; >> /etc/nginx/conf.d/server-env.inc && service nginx reload'

      - name: Stop Current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ env.CURRENT_IP }}
          key: ${{secrets.EC2_SSH_KEY}}
          script_stop: true
          script: |
            docker stop prod1
            docker stop prod2
            docker rm prod1
            docker rm prod2









        
